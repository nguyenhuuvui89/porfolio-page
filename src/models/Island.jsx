// /*
// Auto-generated by: https://github.com/pmndrs/gltfjsx
// Author: nimzu (https://sketchfab.com/nimzuk)
// License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
// Source: https://sketchfab.com/3d-models/foxs-islands-163b68e09fcc47618450150be7785907
// Title: Fox's islands
// */

import  { useRef, useEffect } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame, useThree } from '@react-three/fiber'
import {a} from '@react-spring/three'
import islandScene from '../assets/3d/pirate_island.glb';

const Island = ({isRotating, setIsRotating, setCurrentStage, ...props}) => {
  const islandRef = useRef()
  const { nodes, materials } = useGLTF(islandScene)
  const{gl, viewport} = useThree(); // get the viewport from Three.js

  const lastX = useRef(0); // last x position
  const rotationSpeed=useRef(0); // rotation speed
  const dampingFactor = 0.95; // damping factor for controlling rotation

  // handle pointer down event
  const handlePointerDown = (e) => {
    e.stopPropagation(); // stop event propagation
    e.preventDefault(); // prevent default event  
    setIsRotating(true); // set rotation state to true

    
    const clientX = e.touches ? 
    e.touches[0].clientX 
    : e.clientX; // get clientX
    lastX.current = clientX; // set lastX to clientX
  } 

  const handlePointerUp = (e) => {
    e.stopPropagation(); // stop event propagation
    e.preventDefault(); // prevent default event
    setIsRotating(false); // set rotation state to false
  }

  const handlePointerMove = (e) => {
    e.stopPropagation(); // stop event propagation
    e.preventDefault(); // prevent default event

    if(isRotating){
      const clientX = e.touches 
      ? e.touches[0].clientX 
      : e.clientX; // get clientX

      const delta = (clientX - lastX.current)/viewport.width; // calculate delta
      islandRef.current.rotation.y += delta * Math.PI * 0.01; // rotate island

      lastX.current = clientX;
      rotationSpeed.current = delta * Math.PI * 0.01; // set rotation speed
    }
  }

  const handleKeyDown = (e) => {
    if(e.key === 'ArrowLeft'){
      if(!isRotating){
        setIsRotating(true); // set rotation state to true
        islandRef.current.rotation.y += Math.PI * 0.01; // rotate island
      } else if(e.key === 'ArrowRight'){
        if(!isRotating){
          setIsRotating(true); // set rotation state to true
          islandRef.current.rotation.y -= Math.PI * 0.01; // rotate island
        }
      }
    }
  }

  const handleKeyUp = (e) => {
    if(e.key === 'ArrowLeft' || e.key === 'ArrowRight'){
      setIsRotating(false); // set rotation state to false
    }

  }

  useEffect(() => {
    const canvas = gl.domElement; // get canvas element
    canvas.addEventListener('pointerdown', handlePointerDown);
    canvas.addEventListener('pointerup', handlePointerUp);
    canvas.addEventListener('pointermove', handlePointerMove);
    document.addEventListener('keydown', handleKeyDown);
    document.addEventListener('keyup', handleKeyUp);

    return() =>{
      canvas.removeEventListener('pointerdown', handlePointerDown);
      canvas.removeEventListener('pointerup', handlePointerUp);
      canvas.removeEventListener('pointermove', handlePointerMove);
      document.addEventListener('keydown', handleKeyDown);
      document.addEventListener('keyup', handleKeyUp);
    }

  }, [gl, handlePointerDown, handlePointerUp, handlePointerMove, handleKeyDown, handleKeyUp]);

  useFrame(() => {
    if(!isRotating){
      rotationSpeed.current *= dampingFactor; // update rotation speed
      // islandRef.current.rotation.y += rotationSpeed.current; // rotate island
      if(Math.abs(rotationSpeed.current) < 0.0001){
        rotationSpeed.current = 0; // set rotation speed to 0
      }
      islandRef.current.rotation.y += rotationSpeed.current; // rotate island

    } else{
      const rotation = islandRef.current.rotation.y; // calculate rotation
      /**
       * Normalize the rotation value to ensure it stays within the range [0, 2 * Math.PI].
       * The goal is to ensure that the rotation value remains within a specific range to
       * prevent potential issues with very large or negative rotation values.
       *  Here's a step-by-step explanation of what this code does:
       *  1. rotation % (2 * Math.PI) calculates the remainder of the rotation value when divided
       *     by 2 * Math.PI. This essentially wraps the rotation value around once it reaches a
       *     full circle (360 degrees) so that it stays within the range of 0 to 2 * Math.PI.
       *  2. (rotation % (2 * Math.PI)) + 2 * Math.PI adds 2 * Math.PI to the result from step 1.
       *     This is done to ensure that the value remains positive and within the range of
       *     0 to 2 * Math.PI even if it was negative after the modulo operation in step 1.
       *  3. Finally, ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI) applies another
       *     modulo operation to the value obtained in step 2. This step guarantees that the value
       *     always stays within the range of 0 to 2 * Math.PI, which is equivalent to a full
       *     circle in radians.
       */
      const normalizedRotation =
        ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

      // Set the current stage based on the island's orientation
      switch (true) {
        case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
          setCurrentStage(4);
          break;
        case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
          setCurrentStage(3);
          break;
        case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
          setCurrentStage(2);
          break;
        case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
          setCurrentStage(1);
          break;
        default:
          setCurrentStage(null);
      }
    }}
  )
  return (
    <group ref = {islandRef} {...props}>
      <group
        position={[100.186, 57.532, 137.333]}
        rotation={[Math.PI, 0, -Math.PI]}
        scale={[1, 1, 0.811]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Wood_Wood_0.geometry}
          material={materials.Wood}
          position={[-11.246, 8.486, -23.421]}
        />
      </group>
      <group
        position={[-1.956, 24.887, -1.832]}
        rotation={[-Math.PI / 2, -Math.PI / 2, 0]}
        scale={0.406}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Vegetation_Vegetation_0.geometry}
          material={materials.Vegetation}
          position={[11.524, -163.775, -116.9]}
        />
      </group>
      <group
        position={[-6.542, 37.848, 5.259]}
        rotation={[Math.PI, 0, -Math.PI]}
        scale={[1, 1, 0.811]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Lantern_Lamp_0.geometry}
          material={materials.Lamp}
          position={[-117.974, 28.17, -186.293]}
        />
      </group>
      <group
        position={[100.186, 57.532, 137.333]}
        rotation={[Math.PI, 0, -Math.PI]}
        scale={[1, 1, 0.811]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Metal_Metal_0.geometry}
          material={materials.Metal}
          position={[-11.246, 8.486, -23.421]}
        />
      </group>
      <group
        position={[100.186, 57.532, 137.333]}
        rotation={[Math.PI, 0, -Math.PI]}
        scale={[1, 1, 0.811]}>
        <group position={[-11.246, 8.486, -23.421]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.SkyAndWater_Wood_0.geometry}
            material={materials.Wood}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.SkyAndWater_Skydome_0.geometry}
            material={materials.Skydome}
          />
        </group>
      </group>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.ClothAndSand_Cloth_and_Sand_0.geometry}
        material={materials.Cloth_and_Sand}
        position={[-4.932, 41.008, -12.859]}
        rotation={[-1.656, 0.008, 3.047]}
        scale={0.845}
      />
    </group>
    // a.group is animated group
    // <a.group ref = {islandRef} {...props}>
    //   <mesh
    //     geometry={nodes.polySurface944_tree_body_0.geometry}
    //     material={materials.PaletteMaterial001}
    //   />
    //   <mesh
    //     geometry={nodes.polySurface945_tree1_0.geometry}
    //     material={materials.PaletteMaterial001}
    //   />
    //   <mesh
    //     geometry={nodes.polySurface946_tree2_0.geometry}
    //     material={materials.PaletteMaterial001}
    //   />
    //   <mesh
    //     geometry={nodes.polySurface947_tree1_0.geometry}
    //     material={materials.PaletteMaterial001}
    //   />
    //   <mesh
    //     geometry={nodes.polySurface948_tree_body_0.geometry}
    //     material={materials.PaletteMaterial001}
    //   />
    //   <mesh
    //     geometry={nodes.polySurface949_tree_body_0.geometry}
    //     material={materials.PaletteMaterial001}
    //   />
    //   <mesh
    //     geometry={nodes.pCube11_rocks1_0.geometry}
    //     material={materials.PaletteMaterial001}
    //   />
    // </a.group>
  )
}
export default Island;

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Artjoms Horosilovs (https://sketchfab.com/Artjoms_Horosilovs)
License: CC-BY-NC-SA-4.0 (http://creativecommons.org/licenses/by-nc-sa/4.0/)
Source: https://sketchfab.com/3d-models/sea-keep-lonely-watcher-09a15a0c14cb4accaf060a92bc70413d
Title: Sea Keep "Lonely Watcher"
*/



// Island Castle
// import React, { useRef, useState } from 'react';
// import { useGLTF } from '@react-three/drei';
// import { useFrame } from '@react-three/fiber';
// import isLandScene from '../assets/3d/sea_keep_lonely_watcher.glb'; 

// function Island({...props}) {
//   const { nodes, materials } = useGLTF(isLandScene);
//   const islandRef = useRef();
//   const [isDragging, setIsDragging] = useState(false);
//   const [prevMouseX, setPrevMouseX] = useState(0);

//   const handlePointerDown = (event) => {
//     event.stopPropagation();
//     event.preventDefault();
//     setIsDragging(true);
//     setPrevMouseX(event.clientX || event.touches[0].clientX);
//   };

//   const handlePointerUp = () => {
//     setIsDragging(false);
//   };

//   const handlePointerMove = (event) => {
//     if (!isDragging) return;
//     const mouseX = event.clientX || event.touches[0].clientX;
//     const deltaX = mouseX - prevMouseX;
//     islandRef.current.rotation.y += deltaX * 0.01;
//     setPrevMouseX(mouseX);
//   };

//   useFrame(() => {
//     if (isDragging) return;
//     islandRef.current.rotation.y += 0.0003; // Auto-rotate island when not dragging
//   });


//   return (
//     <group
//       ref={islandRef}
//       {...props}
//       scale={[0.07, 0.07, 0.07]}
//       onPointerDown={handlePointerDown}
//       onPointerUp={handlePointerUp}
//       onPointerMove={handlePointerMove}
//       onTouchStart={handlePointerDown}
//       onTouchEnd={handlePointerUp}
//       onTouchMove={handlePointerMove}
//     >
//       <group position={[17.117, 218.356, 23.591]} rotation={[-Math.PI / 2, 0, Math.PI]}>
//         <group position={[33.745, 38.713, -60.289]}>
//           <mesh
//             geometry={nodes.Fortress_Fortress_0.geometry}
//             material={materials.Fortress}
            
//           />
//           <mesh
//             geometry={nodes.Fortress_Fortress_0_1.geometry}
//             material={materials.Fortress}
//           />
//           <mesh
//             geometry={nodes.Fortress_Fortress_0_2.geometry}
//             material={materials.Fortress}
//           />
//           <mesh
//             geometry={nodes.Fortress_Environment_0.geometry}
//             material={materials.Environment}
//           />
//           <mesh
//             geometry={nodes.Fortress_Sand_0.geometry}
//             material={materials.Sand}
//           />
//         </group>
//       </group>
//       <mesh
//         geometry={nodes.Sea_Sea_0.geometry}
//         material={materials.material}
//         position={[-1.388, 326.224, 14.92]}
//         rotation={[-Math.PI / 2, 0, 0]}
//       />
//       <mesh
//         geometry={nodes.Sky_Sky_0.geometry}
//         material={materials.material_4}
//         rotation={[-Math.PI / 2, 0, 0]}
//       />
//     </group>
//   );
// }

// export default Island;

